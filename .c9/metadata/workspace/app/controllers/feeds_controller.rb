{"filter":false,"title":"feeds_controller.rb","tooltip":"/app/controllers/feeds_controller.rb","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["class FeedsController < ApplicationController","  before_action :set_feed, only: [:show, :edit, :update, :destroy]","","  # GET /feeds","  # GET /feeds.json","  def index","    @feeds = Feed.all","  end","","  # GET /feeds/1","  # GET /feeds/1.json","  def show","  end","","  # GET /feeds/new","  def new","    @feed = Feed.new","  end","","  # GET /feeds/1/edit","  def edit","  end","","  # POST /feeds","  # POST /feeds.json","  def create","    @feed = Feed.new(feed_params)","","    respond_to do |format|","      if @feed.save","        format.html { redirect_to @feed, notice: 'Feed was successfully created.' }","        format.json { render :show, status: :created, location: @feed }","      else","        format.html { render :new }","        format.json { render json: @feed.errors, status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /feeds/1","  # PATCH/PUT /feeds/1.json","  def update","    respond_to do |format|","      if @feed.update(feed_params)","        format.html { redirect_to @feed, notice: 'Feed was successfully updated.' }","        format.json { render :show, status: :ok, location: @feed }","      else","        format.html { render :edit }","        format.json { render json: @feed.errors, status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /feeds/1","  # DELETE /feeds/1.json","  def destroy","    @feed.destroy","    respond_to do |format|","      format.html { redirect_to feeds_url, notice: 'Feed was successfully destroyed.' }","      format.json { head :no_content }","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_feed","      @feed = Feed.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white list through.","    def feed_params","      params.require(:feed).permit(:title, :url, :status, :logo)","    end","end",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":93,"column":0},"action":"insert","lines":["class FeedsController < ApplicationController","  before_action :set_feed, only: [:show, :edit, :update, :destroy, :retrieve]","","","  # GET /feeds","  def index","    @feeds = Feed.all","  end","","  # GET /feeds/1","  def show","  end","","  # GET /feeds/new","  def new","    @feed = Feed.new","  end","","  # GET /feeds/1/edit","  def edit","  end","","  # GET /feeds/1/retrieve","  def retrieve","    body, ok = SuperfeedrEngine::Engine.retrieve(@feed)","    if !ok","      redirect_to @feed , notice: body","    else","      @feed.notified JSON.parse(body)","      redirect_to @feed , notice: \"Retrieved and saved entries\"","    end","  end","","  # POST /feeds","  def create","    @feed = Feed.new(feed_params)","","    if @feed.save","      body, ok = SuperfeedrEngine::Engine.subscribe(@feed, {:retrieve => true})","      if !ok","        redirect_to @feed, notice: \"Feed was successfully created but we could not subscribe: #{body}\"","      else","        if body","          @feed.notified JSON.parse(body)","        end","        redirect_to @feed, notice: 'Feed was successfully created and subscribed!'","      end","    else","      render :new","    end","  end","","  # PATCH/PUT /feeds/1","  def update","    if @feed.update(feed_params)","      body, ok = SuperfeedrEngine::Engine.unsubscribe(@feed)","      if !ok","        render :edit, notice: \"Feed was successfully updated, but we could not unsubscribe and resubscribe it. #{body}\"","      else","        body, ok = SuperfeedrEngine::Engine.subscribe(@feed)","        if !ok","          render :edit, notice: \"Feed was successfully updated, but we could not unsubscribe and resubscribe it. #{body}\"","        else","          redirect_to @feed, notice: 'Feed was successfully updated.'","        end","      end","    else","      render :edit","    end","  end","","  # DELETE /feeds/1","  def destroy","    body, ok =  SuperfeedrEngine::Engine.unsubscribe(@feed)","    if !ok","      redirect_to @feed, notice: body","    else","      @feed.destroy","      redirect_to feeds_url, notice: 'Feed was successfully destroyed.'","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_feed","      @feed = Feed.find(params[:id])","    end","","    # Only allow a trusted parameter \"white list\" through.","    def feed_params","      params.require(:feed).permit(:title, :url)","    end","end",""]}]]},"ace":{"folds":[],"scrolltop":1081.5,"scrollleft":0,"selection":{"start":{"row":93,"column":0},"end":{"row":93,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":62,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1446911804481,"hash":"bd71003474c6985c5e06258642ce96b4ce086f25"}